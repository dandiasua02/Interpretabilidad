https://archive.ics.uci.edu/ml/datasets/Shill+Bidding+Dataset

https://archive.ics.uci.edu/ml/datasets/Wine+Quality

def explicacion_del_modelo(N,f,datos, cabecera):
    X = [] # Muestras perturbadas
    R = [] # Representaciones
    W = [] # Distancias entre muestra x y sus perturbaciones
    for i in range(N):
        k = random.randint(1, len(datos))
        datos_perturbados = datos.copy()
        for j in range(k):
            atributo_a_perturbar = random.randint(0,len(datos)-1)
            rango_maximo = abs(max(a[atributo_a_perturbar] for a in cabecera))
            rango_minimo = abs(min(a[atributo_a_perturbar] for a in cabecera))
            datos_perturbados[atributo_a_perturbar] = random.uniform(rango_minimo, rango_maximo)
        w = abs(sum(datos[atributo] - datos_perturbados[atributo] for atributo in range(0, len(datos)-1)))
        r = [0 if datos_perturbados[atributo] == datos[atributo] else 1 for atributo in range(0,len(datos)-1)]
        X.append(datos_perturbados)
        R.append(r)
        W.append(w)
        print(r)
    X = np.expand_dims(datos_perturbados, axis=0)
    Y_perturbada = f.predict(X)
    G = Ridge()
    G.fit(R, Y_perturbada, sample_weight=W)
    return G.get_params()
